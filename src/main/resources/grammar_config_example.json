{
    "Settings" : [
        {
            "name": "MaskingITF",
            "seed" : 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Implementing Transformers\\experiment\\datasets",
            "task": "class-masking",
            "word-generation": "single",
            "phrase-count-cap": 10000,
            "search-tree-depth-cap": 500,
            "phrase-length-cap": 75
        },
        {
            "name": "TreeBracketsSmall",
            "seed": 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "tree-bracketing",
            "word-generation": "single",
            "phrase-count-cap": 10000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        },
        {
            "name": "MaskingSmall",
            "seed" : 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "class-masking",
            "word-generation": "single",
            "phrase-count-cap": 10000,
            "search-tree-depth-cap": 200,
            "phrase-length-cap": 200
        },
        {
            "name": "TreeBracketsLarge",
            "seed": 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "tree-bracketing",
            "word-generation": "single",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        },
        {
            "name": "TreeBracketsLargeAll",
            "seed": 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "tree-bracketing",
            "word-generation": "all",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 200,
            "phrase-length-cap": 100
        },
        {
            "name": "MaskingLarge",
            "seed" : 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "class-masking",
            "word-generation": "single",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        },
        {
            "name": "MaskingLargeAll",
            "seed" : 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "class-masking",
            "word-generation": "all",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        },
        {
            "name": "ClassificationLarge",
            "seed": 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "binary-classification",
            "word-generation": "single",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        },
        {
            "name": "ClassificationLargeAll",
            "seed": 420,
            "output-dir": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\DEV\\server-export\\data",
            "task": "binary-classification",
            "word-generation": "all",
            "phrase-count-cap": 100000,
            "search-tree-depth-cap": 100,
            "phrase-length-cap": 100
        }
    ],
    "Grammars": [
        {
            "name" : "Extern CFG",
            "load-from": "C:\\Users\\MKhal\\OneDrive\\Desktop\\UNI\\Bachelorarbeit\\Data\\NLTK_LARGE_GRAMMAR\\large_grammars\\atis.cfg"
        },
        {
            "name" : "ExampleGrammar",
            "non-terminals": ["A", "B", "C", "D"],
            "terminals" : ["a", "b", "c"],
            "mask-worthy" : ["a"],
            "rules" : ["A -> A B| B| B C| a", "B -> b", "C -> A | c"],
            "dictionary" : {
                "a"  :  ["Peter", "Hans", "Gerhard"],
                "b"  :  ["b"],
                "c" :  ["c"]
            },
            "start-phrase": "A C A B A"
        },
        {
            "name" : "SF",
            "non-terminals": ["S"],
            "terminals" : ["P", "A", "SAGT", "DASS"],
            "rules" : [
                "S -> P SAGT DASS S",
                "S -> A"
            ],
            "dictionary" : {
                "DASS" : [",_dass"],
                "SAGT" : ["sagt", "denkt"] ,
                "P" : ["Toni", "Sunny"],
                "A" : ["alles_ok_ist"]
            },
            "start-phrase": "S"
        },
        {
            "name" : "NSF",
            "non-terminals": ["T", "S"],
            "terminals" : ["P", "A", "SAGT", "DASS", "UND"],
            "rules" : [
                "T -> S | S UND T",
                "S -> P SAGT DASS S | A"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DASS" : [",_dass"],
                "SAGT" : ["sagt", "meint", "will"] ,
                "P" : ["Toni", "Marie", "Sunny", "Leo", "Thommy"],
                "A" : ["alles_ok_ist", "es_morgen_schneit"]
            },
            "start-phrase": "T"
        },
        {
            "name" : "1-Dyck",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_s",
                "S -> D N_s KOMMA DEREN T KOMMA V_s",
                "T -> N_s V_s",
                "T -> N_s KOMMA P KOMMA V_s",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "D" : ["die", "eine", "diese"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s"]
        },
        {
            "name" : "1-Dyck-Vanilla",
            "non-terminals": ["S"],
            "terminals" : ["BL", "BR"],
            "rules" : [
                "S -> S S",
                "S -> BL S BR | BL BR"
            ],
            "dictionary" : {
                "BL" : ["["],
                "BR" : ["]"]
            },
            "start-phrase": "S"
        },
        {
            "name" : "2-Dyck",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_s | D N_p V_p",
                "S -> D N_s KOMMA DEREN T KOMMA V_s | D N_p KOMMA DEREN T KOMMA V_p",
                "T -> N_s V_s | N_p V_p",
                "T -> N_s KOMMA P KOMMA V_s | N_p KOMMA P KOMMA V_p",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "N_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "V_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "D" : ["die"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "2-Dyck-OOD",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s KOMMA DEREN T KOMMA V_s | D N_p KOMMA DEREN T KOMMA V_p",
                "T -> N_s V_s | N_p V_p",
                "T -> N_s KOMMA P KOMMA V_s | N_p KOMMA P KOMMA V_p",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "N_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "V_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "D" : ["die"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]

        },
        {
            "name" : "2-Dyck-Commaless",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_s | D N_p V_p",
                "S -> D N_s DEREN T V_s | D N_p DEREN T V_p",
                "T -> N_s V_s | N_p V_p",
                "T -> N_s P V_s | N_p P V_p",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "N_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "V_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "D" : ["die"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "2-Dyck-Span-Reg",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p", "TN_s", "TV_s", "TN_p", "TV_p"],
            "rules" : [
                "S -> D N_s KOMMA DEREN T KOMMA V_s | D N_p KOMMA DEREN T KOMMA V_p",
                "T -> T UND T | TN_s TV_s"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "N_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "V_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "TN_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "TV_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "TN_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "TV_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "D" : ["die"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "2-Dyck-Vanilla",
            "non-terminals": ["S"],
            "terminals" : ["BL", "BR", "BL_", "BR_"],
            "rules" : [
                "S -> S S",
                "S -> BL S BR | BL BR",
                "S -> BL_ S BR_ | BL_ BR_"
            ],
            "dictionary" : {
                "BL" : ["["],
                "BR" : ["]"],
                "BL_" : ["{"],
                "BR_" : ["}"]
            },
            "start-phrase": "S"
        },
        {
            "name" : "2-Dyck-English",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_s | D N_p V_p",
                "S -> D N_s KOMMA DEREN T KOMMA V_s | D N_p KOMMA DEREN T KOMMA V_p",
                "T -> N_s V_s | N_p V_p",
                "T -> N_s KOMMA P KOMMA V_s | N_s KOMMA P KOMMA V_s",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["and"],
                "DEREN" : ["whose"],
                "KOMMA" : [","],
                "N_s" : ["bear", "Monica", "daughter", "mother"],
                "V_s" : ["walks", "plays", "dences", "sings", "swims"],
                "N_p" : ["bears", "plates", "dogs", "bottles"],
                "V_p" : ["fly", "fall", "lay", "stay"],
                "D" : ["the"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "2-Dyck-English-Commaless",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_s | D N_p V_p",
                "S -> D N_s DEREN T V_s | D N_p DEREN T V_p",
                "T -> N_s V_s | N_p V_p",
                "T -> N_s P V_s | N_p P V_p",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["and"],
                "DEREN" : ["whose"],
                "N_s" : ["bear", "Monica", "daughter", "mother"],
                "V_s" : ["walks", "plays", "dences", "sings", "swims"],
                "N_p" : ["bears", "plates", "dogs", "bottles"],
                "V_p" : ["fly", "fall", "lay", "stay"],
                "D" : ["the"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "2-Dyck-Wrong",
            "non-terminals": ["S", "T", "P"],
            "terminals" : ["UND", "DEREN", "KOMMA", "D", "N_s", "V_s", "N_p", "V_p"],
            "rules" : [
                "S -> S UND S",
                "S -> D N_s V_p | D N_p V_s",
                "S -> D N_s KOMMA DEREN T KOMMA V_p | D N_p KOMMA DEREN T KOMMA V_s",
                "T -> N_s V_p | N_p V_s",
                "T -> N_s KOMMA P KOMMA V_p | N_p KOMMA P KOMMA V_s",
                "P -> DEREN T",
                "P -> P UND P"
            ],
            "dictionary" : {
                "UND" : ["und"],
                "DEREN" : ["deren"],
                "KOMMA" : [","],
                "N_s" : ["Bärin", "Katja", "Tochter", "Mutter"],
                "V_s" : ["geht", "spielt", "tanzt", "singt", "schwimmt"],
                "N_p" : ["Bären", "Teller", "Hünde", "Flaschen"],
                "V_p" : ["fliegen", "fallen", "liegen", "stehen"],
                "D" : ["die"]
            },
            "start-phrase": "S",
            "mask-worthy": ["N_s", "V_s", "N_p", "V_p"]
        },
        {
            "name" : "ITF-1-Dyck",
            "non-terminals": ["S", "P1", "P2"],
            "terminals" : ["A", "B", "C", "D", "BL1", "BR1"],
            "rules" : [
                "S -> S S | BL1 BR1",
                "S -> BL1 S BR1",
                "S -> P1 | P2",
                "P1 -> A B P1 | C D P1 | A B | C D",
                "P2 -> B A P2 | D C P2 | B A | D C"
            ],
            "dictionary" : {
                "A" : ["A"],
                "B" : ["B"],
                "C" : ["C"],
                "D" : ["D"],
                "BL1" : ["("],
                "BR1" : [")"]
            },
            "start-phrase": "S"
        },
        {
            "name" : "ITF-2-Dyck",
            "non-terminals": ["S", "P1", "P2"],
            "terminals" : ["A", "B", "C", "D", "BL1", "BR1", "BL2", "BR2"],
            "rules" : [
                "S -> S S | BL1 BR1 | BL2 BR2",
                "S -> BL1 S BR1 | BL2 S BR2",
                "S -> P1 | P2",
                "P1 -> A B P1 | C D P1 | A B | C D",
                "P2 -> B A P2 | D C P2 | B A | D C"
            ],
            "dictionary" : {
                "A" : ["A"],
                "B" : ["B"],
                "C" : ["C"],
                "D" : ["D"],
                "BL1" : ["("],
                "BR1" : [")"],
                "BL2" : ["["],
                "BR2" : ["]"]
            },
            "start-phrase": "S"
        },
        {
            "name" : "ITF-3-Dyck",
            "non-terminals": ["S", "P1", "P2"],
            "terminals" : ["A", "B", "C", "D", "BL1", "BR1", "BL2", "BR2", "BL3", "BR3"],
            "rules" : [
                "S -> S S | BL1 BR1 | BL2 BR2 | BL3 BR3",
                "S -> BL1 S BR1 | BL2 S BR2 | BL3 S BR3",
                "S -> P1 | P2",
                "P1 -> A B P1 | C D P1 | A B | C D",
                "P2 -> B A P2 | D C P2 | B A | D C"
            ],
            "dictionary" : {
                "A" : ["A"],
                "B" : ["B"],
                "C" : ["C"],
                "D" : ["D"],
                "BL1" : ["("],
                "BR1" : [")"],
                "BL2" : ["["],
                "BR2" : ["]"],
                "BL3" : ["{"],
                "BR3" : ["}"]
            },
            "start-phrase": "S"
        }
    ],
    "Outputs": [
        {
            "Grammar" : "ITF-1-Dyck",
            "Setting" : "MaskingITF",
            "file-name": "1D-MASK",
            "overwrite-file": false
        },
        {
            "Grammar" : "ITF-2-Dyck",
            "Setting" : "MaskingITF",
            "file-name": "2D-MASK",
            "overwrite-file": false
        },
        {
            "Grammar" : "ITF-2-Dyck",
            "Setting" : "MaskingITF",
            "file-name": "3D-MASK",
            "overwrite-file": false
        },
        {
            "Grammar" : "SF",
            "Setting" : "TreeBracketsLargeAll",
            "file-name": "SF-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "SF",
            "Setting" : "MaskingLargeAll",
            "file-name": "SF-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "SF",
            "Setting" : "ClassificationLargeAll",
            "file-name": "SF-Classify",
            "overwrite-file": false
        },
        {
            "Grammar" : "NSF",
            "Setting" : "TreeBracketsLarge",
            "file-name": "NSF-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "NSF",
            "Setting" : "MaskingLarge",
            "file-name": "NSF-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "NSF",
            "Setting" : "ClassificationLarge",
            "file-name": "NSF-Classify",
            "overwrite-file": false
        },
        {
            "Grammar" : "Extern CFG",
            "Setting" : "MaskingLarge",
            "file-name": "LARGE-MASKING",
            "overwrite-file": false
        },
        {
            "Grammar" : "Extern CFG",
            "Setting" : "TreeBracketsLarge",
            "file-name": "LARGE-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "Extern CFG",
            "Setting" : "ClassificationLarge",
            "file-name": "LARGE-Classify",
            "overwrite-file": false
        },
        {
            "Grammar" : "1-Dyck",
            "Setting" : "TreeBracketsLarge",
            "file-name": "1D-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "1-Dyck",
            "Setting" : "MaskingLarge",
            "file-name": "1D-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "1-Dyck",
            "Setting" : "ClassificationLarge",
            "file-name": "1D-Classify",
            "overwrite-file": false
        },
        {
            "Grammar" : "1-Dyck-Vanilla",
            "Setting" : "TreeBracketsLarge",
            "file-name": "1DV-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-Vanilla",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2DV-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2D-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck",
            "Setting" : "MaskingLarge",
            "file-name": "2D-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck",
            "Setting" : "ClassificationLarge",
            "file-name": "2D-Classify",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-OOD",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2DOOD-Bracket",
            "overwrite-file": true
        },
        {
            "Grammar" : "2-Dyck-Commaless",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2DCL-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-Commaless",
            "Setting" : "MaskingLarge",
            "file-name": "2DCL-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-Span-Reg",
            "Setting" : "MaskingSmall",
            "file-name": "2DS-Mask",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-English",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2DENG-Bracket",
            "overwrite-file": false
        },
        {
            "Grammar" : "2-Dyck-English-Commaless",
            "Setting" : "TreeBracketsLarge",
            "file-name": "2DENGCL-Bracket",
            "overwrite-file": false
        }
    ]
}

